import{_ as s,c as i,o as a,a6 as e}from"./chunks/framework.DmJO695r.js";const n="/aws/images/docker1.png",t="/aws/images/docker2.png",l="/aws/images/docker3.png",p="/aws/images/docker4.png",D=JSON.parse('{"title":"Dockerizing and Hosting a Web Application on an EC2 Instance","description":"","frontmatter":{},"headers":[],"relativePath":"docs/app-deployment/01-docker-overview.md","filePath":"docs/app-deployment/01-docker-overview.md","lastUpdated":1736553490000}'),h={name:"docs/app-deployment/01-docker-overview.md"},o=e(`<h1 id="dockerizing-and-hosting-a-web-application-on-an-ec2-instance" tabindex="-1">Dockerizing and Hosting a Web Application on an EC2 Instance <a class="header-anchor" href="#dockerizing-and-hosting-a-web-application-on-an-ec2-instance" aria-label="Permalink to &quot;Dockerizing and Hosting a Web Application on an EC2 Instance&quot;">​</a></h1><p>In this guide, we will use Github Actions to build, tag, and upload your application to dockerhub. We will also use gh-actions to send your <code>docker-compose</code> file to your ec2 instance to run the containerized application.</p><p>While there are many ways to deploy a web application to an EC2 instance, using Docker and Github Actions is a popular choice because it simplifies the deployment process and makes it easier to manage your application&#39;s dependencies and environment.</p><p>This approach will allow you to establish a CI/CD pipeline for your web applications, making it easier to deploy updates and new features to your application.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>Before you can host a web application on an EC2 instance, you need to have the following:</p><ul><li><a href="/aws/docs/ec2/01-create-an-instance.html">An EC2 instance running in your AWS account</a></li><li><a href="/aws/docs/ec2/02-connecting-to-ec2.html">SSH access to your EC2 instance</a></li><li>A web application that you want to host on the EC2 instance</li><li><a href="https://hub.docker.com/" target="_blank" rel="noreferrer">A DockerHub account</a></li></ul><h2 id="dockerizing-your-web-application" tabindex="-1">Dockerizing Your Web Application <a class="header-anchor" href="#dockerizing-your-web-application" aria-label="Permalink to &quot;Dockerizing Your Web Application&quot;">​</a></h2><p>The first step in hosting a web application on an EC2 instance is to containerize your application using Docker. This involves creating a <code>Dockerfile</code> that specifies how to build and run your application in a container.</p><p>This guide assumes that you have a web application that is written in a framework requiring a <code>build</code> step to be published. For example, a Vue, React or Angular application that requires a <code>npm run build</code> command to generate the static files. This guide will also assume that you have a server-side application that serves the static files from a folder named <em><code>www</code></em> or <em><code>wwwroot</code></em>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">application</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 📦</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 🐋</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 📁</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> www</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # static files</span></span></code></pre></div><ol><li>Ensure you have a <code>Dockerfile</code> in the root directory of your <code>server</code>. The <code>Dockerfile</code> should contain the following instructions:</li></ol><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-TsVz3" id="tab-Z1CDpo6" checked><label for="tab-Z1CDpo6">node</label><input type="radio" name="group-TsVz3" id="tab-TY8TkZH"><label for="tab-TY8TkZH">dotnet</label></div><div class="blocks"><div class="language-Dockerfile vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use an official Node.js runtime as the base image for the client build</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --platform=linux/amd64 node:20-slim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client-builder</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set the working directory in the client builder container</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /app/client</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copy the client application source code to the client builder container</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client ./</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install client application dependencies</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build the client-side code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm run build</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use a smaller base image for the final server image</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:20-slim</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set the working directory in the server container</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /app/server</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copy the server application source code to the server container</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server ./</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install server application dependencies</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copy the built client files from the client builder container</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># into the server&#39;s www directory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=client-builder /app/client/dist /app/server/www</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define the command to start your Node.js application</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span></code></pre></div><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use an official Node.js runtime as the base image for the client build</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --platform=linux/amd64 node:20-slim </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client-builder</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set the working directory in the client builder container</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /app/client</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copy the client application source code to the client builder container</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client ./</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install client application dependencies</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build the client-side code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm run build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># The dotnet version should match the version of your application</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mcr.microsoft.com/dotnet/sdk:8.0-alpine-amd64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> build-env</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Set the working directory in the build environment</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /app/server</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copy the server application source code to the build environment</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server ./</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Restore as distinct layers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dotnet restore</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Copy the built client files from the client builder container</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># into the server&#39;s www directory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=client-builder /app/client/dist /app/server/wwwroot</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build and publish a release</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dotnet publish -c Release -o out</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start runtime image</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mcr.microsoft.com/dotnet/aspnet:8.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=build-env /app/server/out .</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ASPNETCORE_URLS=http://*:$PORT dotnet &lt;APP_NAME&gt;.dll</span></span></code></pre></div></div></div><ol start="2"><li>Create a <code>docker-compose.yml</code> file in the root directory of your web application. The <code>docker-compose.yml</code> file should contain the following instructions:</li></ol><details class="details custom-block"><summary>⚠️ docker-compose rules</summary><ul><li>Replace <code>&lt;dockerhub-username&gt;</code> and <code>&lt;app_name&gt;</code> with your DockerHub username and the name of your application</li><li>The name of the application must be lowercased and url safe</li><li>The <code>env_file</code> key is optional and can be used to reference an environment file</li><li>The <code>ports</code> key is used to map the application port to the EC2 instance port</li><li>The <code>restart</code> key is set to <code>unless-stopped</code> to ensure the container restarts if it stops unexpectedly</li></ul></details><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;dockerhub-username&gt;/&lt;app_name&gt;:latest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">unless-stopped</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;app_name&gt;.env</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Optional: reference an environment file</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;7045:80&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ec2-port:app-port verify the port mapping</span></span></code></pre></div><details class="details custom-block"><summary>🐳 Create a DockerHub Account</summary><p>DockerHub is a cloud-based registry service that allows you to store and manage your Docker images. You can use DockerHub to build, test, and deploy your containerized applications.</p><p>For this guide, you will need to create a DockerHub account and generate a Personal Access Token to authenticate with DockerHub. We will use this token to push your Docker images to DockerHub from a github action.</p><h3 id="setting-up-dockerhub" tabindex="-1">Setting up DockerHub <a class="header-anchor" href="#setting-up-dockerhub" aria-label="Permalink to &quot;Setting up DockerHub&quot;">​</a></h3><ol><li>Go to <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">DockerHub</a> and create an account.</li></ol><p><img src="`+n+'" alt="docker-login"></p><ol start="2"><li>Make a note of your DockerHub username.</li><li>Generate a new Personal Access Token by going to your DockerHub <a href="https://app.docker.com/settings/personal-access-tokens" target="_blank" rel="noreferrer"><em><strong>account settings -&gt; security -&gt; Personal Access Tokens</strong></em></a>.</li></ol><p><img src="'+t+'" alt="docker-login"></p><p><img src="'+l+'" alt="docker-login"></p><ul><li>Name the token and give it (<em>read, write, delete</em>) permissions.</li></ul><p><img src="'+p+'" alt="docker-login"></p><ul><li>Keep the token secure as it will be used as your DockerHub password.</li><li>Do not share the token with anyone.</li><li>Do not store the token in your codebase.</li><li>Do not commit the token to your version control system.</li><li>Do not hardcode the token in your scripts.</li></ul><ol start="4"><li>Copy the Personal Access Token and store it securely.</li></ol><ul><li><a href="/aws/docs/app-deployment/02-github-actions-and-secrets.html">We will use Github Secrets to store the token securely</a>.</li></ul></details>',17),r=[o];function k(c,d,g,u,y,E){return a(),i("div",null,r)}const b=s(h,[["render",k]]);export{D as __pageData,b as default};

import{_ as i,c as e,o as a,a6 as s}from"./chunks/framework.DmJO695r.js";const g=JSON.parse('{"title":"Dockerizing and Hosting a Web Application on an EC2 Instance","description":"","frontmatter":{},"headers":[],"relativePath":"docs/docker/00-docker-overview.md","filePath":"docs/docker/00-docker-overview.md","lastUpdated":1722883279000}'),n={name:"docs/docker/00-docker-overview.md"},o=s(`<h1 id="dockerizing-and-hosting-a-web-application-on-an-ec2-instance" tabindex="-1">Dockerizing and Hosting a Web Application on an EC2 Instance <a class="header-anchor" href="#dockerizing-and-hosting-a-web-application-on-an-ec2-instance" aria-label="Permalink to &quot;Dockerizing and Hosting a Web Application on an EC2 Instance&quot;">​</a></h1><p>In this guide, we will use Github Actions to build, tag, and upload your application to dockerhub. We will also use actions to send your <code>docker-compose</code> file to your ec2 instance to run the containerized application.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>Before you can host a web application on an EC2 instance, you need to have the following:</p><ul><li>An EC2 instance running in your AWS account</li><li>An EC2 instance with Docker installed</li><li>A web application that you want to host on the EC2 instance</li><li>SSH access to your EC2 instance</li><li>A DockerHub account</li></ul><h2 id="dockerizing-your-web-application" tabindex="-1">Dockerizing Your Web Application <a class="header-anchor" href="#dockerizing-your-web-application" aria-label="Permalink to &quot;Dockerizing Your Web Application&quot;">​</a></h2><p>To host a web application on an EC2 instance, you need to containerize your application using Docker. This involves creating a <code>Dockerfile</code> that specifies how to build your application and run it inside a container.</p><p>To dockerize your web application, follow these steps:</p><ol><li>Create a <code>Dockerfile</code> in the root directory of your web application. The <code>Dockerfile</code> should contain the following instructions:</li></ol><div class="language-Dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Dockerfile</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use an official Node.js runtime as the base image</span></span></code></pre></div><ol start="2"><li>Create a <code>docker-compose.yml</code> file in the root directory of your web application. The <code>docker-compose.yml</code> file should contain the following instructions:</li></ol><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3000:3000&quot;</span></span></code></pre></div>`,12),t=[o];function l(c,r,p,d,h,k){return a(),e("div",null,t)}const E=i(n,[["render",l]]);export{g as __pageData,E as default};

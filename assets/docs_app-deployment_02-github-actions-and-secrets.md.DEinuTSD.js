import{_ as s,c as i,o as a,a6 as e}from"./chunks/framework.DmJO695r.js";const n="/aws/images/image47.png",t="/aws/images/gh1.png",l="/aws/images/gh2.png",p="/aws/images/gh3.png",m=JSON.parse('{"title":"Github Actions and Secrets","description":"","frontmatter":{},"headers":[],"relativePath":"docs/app-deployment/02-github-actions-and-secrets.md","filePath":"docs/app-deployment/02-github-actions-and-secrets.md","lastUpdated":1723072404000}'),h={name:"docs/app-deployment/02-github-actions-and-secrets.md"},o=e('<h1 id="github-actions-and-secrets" tabindex="-1">Github Actions and Secrets <a class="header-anchor" href="#github-actions-and-secrets" aria-label="Permalink to &quot;Github Actions and Secrets&quot;">​</a></h1><p>GitHub Actions is a powerful automation tool that allows you to build, test, and deploy your code directly from your GitHub repository. You can use GitHub Actions to automate your workflows, create custom CI/CD pipelines, and integrate with other tools and services.</p><p>In this guide, we will walk you through the process of setting up GitHub Actions to deploy your web application to an EC2 instance. We will use GitHub Actions to build a Docker image, push it to DockerHub, and deploy it to an EC2 instance. We will also show you how to securely store your DockerHub credentials using GitHub Secrets.</p><h2 id="assumptions" tabindex="-1">Assumptions <a class="header-anchor" href="#assumptions" aria-label="Permalink to &quot;Assumptions&quot;">​</a></h2><p>This guide assumes you have the following:</p><ul><li>A GitHub account and a GitHub repository containing your web application</li><li>An EC2 instance running in your AWS account</li><li>SSH access to your EC2 instance</li><li>A DockerHub account and Personal Access Token (PAT)</li><li>You have the bcw CLI installed on your local machine <ul><li><code>npm i -g bcw</code></li></ul></li></ul><h2 id="setting-up-github-actions" tabindex="-1">Setting up GitHub Actions <a class="header-anchor" href="#setting-up-github-actions" aria-label="Permalink to &quot;Setting up GitHub Actions&quot;">​</a></h2><p>In this guide, we will use GitHub Actions to automate the deployment of your web application to an EC2 instance. We will create two workflows: one to build and push the Docker image to DockerHub, and another to deploy the application to the EC2 instance.</p><h2 id="step-1-bcw-add" tabindex="-1">Step 1: BCW Add <a class="header-anchor" href="#step-1-bcw-add" aria-label="Permalink to &quot;Step 1: BCW Add&quot;">​</a></h2><p>Using the <code>bcw</code> CLI we will add the necessary GitHub Actions workflows to your repository.</p><p>From the root of your application you will run <code>bcw add</code> and select the <code>workflow_docker_ec2</code> option.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bcw</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span></span></code></pre></div><p><img src="'+n+`" alt="bcw-add"></p><p>This will create a <code>.github/workflows</code> directory with two files <code>build.yml</code> and <code>deploy.yml</code> .</p><p>Your directory structure should now look like this:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">application</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .github/workflows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build.yml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy.yml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> client</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 📦</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 🐋</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 📁</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> www</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # static files</span></span></code></pre></div><p>These files contain the instructions needed to build and push your application image to dockerhub then deploy your <code>docker-compose.yml</code> to your ec2 instance. Finally it will run the <code>docker-compose up -d</code> command to start your application.</p><p>You shouldn&#39;t need to change any of the code in these two files. But lets review them to understand what they are doing.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-yGtes" id="tab-6LRu9Eg" checked><label for="tab-6LRu9Eg">build.yml</label><input type="radio" name="group-yGtes" id="tab-G1dya4g"><label for="tab-G1dya4g">deploy.yml</label></div><div class="blocks"><div class="language-yaml vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Docker Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  build-push-deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">contains(github.event.head_commit.message, &#39;deploy&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Checkout Repository 👀</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Set up QEMU</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker/setup-qemu-action@v3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Set up Docker Buildx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker/setup-buildx-action@v3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Login to Docker Hub 🔐</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker/login-action@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.DOCKER_USERNAME }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.DOCKER_PASSWORD }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build and Push Docker Image 🐋</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker/build-push-action@v5</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.DOCKER_USERNAME }}/\${{ secrets.REPO_NAME }}:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">server/Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy to EC2 ☁️</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  workflow_run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    workflows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Docker Build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">completed</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  EC2_IP_ADDRESS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.EC2_IP_ADDRESS }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  EC2_USERNAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.EC2_USERNAME }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  EC2_PEM_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.EC2_PEM_KEY }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  REPO_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.REPO_NAME }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  DOCKER_USERNAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.DOCKER_USERNAME }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  DOCKER_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.DOCKER_PASSWORD }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ENV_FILE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.ENV_FILE }}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ github.event.workflow_run.conclusion == &#39;success&#39; }}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Checkout Repository</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">SSH KEY 🔑</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          mkdir -p ~/.ssh</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          echo &quot;$EC2_PEM_KEY&quot; &gt; ~/.ssh/id_rsa.pem</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          chmod 600 ~/.ssh/id_rsa.pem</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Send Docker Compose 🐋</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          scp -i ~/.ssh/id_rsa.pem -o StrictHostKeyChecking=no -r server/docker-compose.yml $EC2_USERNAME@$EC2_IP_ADDRESS:~/$REPO_NAME-compose</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Docker pull -&gt; up 🐳</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          ssh -i ~/.ssh/id_rsa.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_IP_ADDRESS &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            sudo echo &#39;$ENV_FILE&#39; &gt; ~/$REPO_NAME-env &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            sudo docker login -u $DOCKER_USERNAME -p &#39;$DOCKER_PASSWORD&#39; &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            sudo docker pull $DOCKER_USERNAME/$REPO_NAME:latest &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            sudo docker-compose -p $REPO_NAME -f ~/$REPO_NAME-compose up -d</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Docker prune 🌳</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          ssh -i ~/.ssh/id_rsa.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_IP_ADDRESS &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            sudo docker image prune -a -f</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;</span></span></code></pre></div></div></div><details class="details custom-block"><summary>📝 build.yml</summary><blockquote><p>To trigger this workflow, you need to push to the <code>main</code> branch with a commit message containing the word <code>deploy</code> .</p></blockquote><p>The <code>build.yml</code> file contains the instructions to build and push the Docker image to DockerHub. The workflow is triggered on a push event to the <code>main</code> branch. It checks if the commit message contains the word <code>deploy</code> before running the workflow.</p><p>The workflow consists of the following steps:</p><ol><li><p><strong>Checkout Repository</strong>: This step checks out the repository code.</p></li><li><p><strong>Set up QEMU</strong>: This step sets up QEMU for cross-platform builds.</p></li><li><p><strong>Set up Docker Buildx</strong>: This step sets up Docker Buildx for building multi-platform images.</p></li><li><p><strong>Login to Docker Hub</strong>: This step logs in to DockerHub using the Docker login action. It uses the DockerHub username and password stored in GitHub Secrets.</p></li><li><p><strong>Build and Push Docker Image</strong>: This step builds and pushes the Docker image to DockerHub. It uses the Docker Build and Push action to build the image from the <code>server/Dockerfile</code> and push it to DockerHub.</p></li></ol></details><details class="details custom-block"><summary>📝 deploy.yml</summary><blockquote><p>This workflow is triggered when the <code>Docker Build</code> workflow is completed successfully.</p></blockquote><p>The <code>deploy.yml</code> file contains the instructions to deploy the application to an EC2 instance. The workflow is triggered when the <code>Docker Build</code> workflow is completed successfully.</p><p>The workflow consists of the following steps:</p><ol><li><p><strong>Checkout Repository</strong>: This step checks out the repository code.</p></li><li><p><strong>SSH KEY</strong>: This step creates an SSH key file and sets the correct permissions.</p></li><li><p><strong>Send Docker Compose</strong>: This step copies the <code>docker-compose.yml</code> file to the EC2 instance.</p></li><li><p><strong>Docker pull -&gt; up</strong>: This step logs in to DockerHub on the EC2 instance, pulls the Docker image, and starts the application using <code>docker-compose</code>.</p></li><li><p><strong>Docker prune</strong>: This step cleans up unused Docker images on the EC2 instance.</p></li></ol></details><h2 id="step-2-configure-github-secrets" tabindex="-1">Step 2: Configure GitHub Secrets <a class="header-anchor" href="#step-2-configure-github-secrets" aria-label="Permalink to &quot;Step 2: Configure GitHub Secrets&quot;">​</a></h2><p>To securely store sensitive information like your DockerHub credentials and EC2 SSH key, you can use GitHub Secrets. GitHub Secrets allow you to store encrypted variables that can be used in your GitHub Actions workflows.</p><p>To configure GitHub Secrets, follow these steps:</p><ol><li>Go to your GitHub repository and click on <code>Settings</code>.</li></ol><p><img src="`+t+'" alt="gh-settings"></p><ol start="2"><li>In the left sidebar, click on <code>Secrets</code>.</li></ol><ul><li>eg. <code>https://github.com/&lt;username&gt;/&lt;repo&gt;/settings/secrets/actions</code></li></ul><ol start="3"><li>Click on <code>New repository secret</code>.</li></ol><p><img src="'+l+'" alt="gh-settings"></p><ol start="4"><li>Add the following secrets:</li></ol><ul><li><code>DOCKER_USERNAME</code>: Your DockerHub username.</li><li><code>DOCKER_PASSWORD</code>: Your DockerHub Personal Access Token (PAT).</li><li><code>EC2_IP_ADDRESS</code>: The public IP address of your EC2 instance.</li><li><code>EC2_USERNAME</code>: The username to SSH into your EC2 instance.</li><li><code>EC2_PEM_KEY</code>: The private key file used to SSH into your EC2 instance.</li><li><code>REPO_NAME</code>: The name of your repository.</li><li><code>ENV_FILE</code>: The name of your environment file (if applicable).</li></ul><p><img src="'+p+`" alt="gh-settings"></p><details class="details custom-block"><summary>🚨 Common Mistakes with Secrets</summary><ul><li>When adding the <code>EC2_PEM_KEY</code> secret, make sure to paste the contents of the private key file, not the file path. Also be sure to include the entire contents. Do not add any extra spaces or newlines</li></ul><div class="language-pem vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">pem</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-----BEGIN RSA PRIVATE KEY-----</span></span>
<span class="line"><span>gUd+NtBQ5Dbqgmm9tpaTDMkBK/4fE1omFP8eQAmlUvNObbFvSKHrnBO/3kIG9xWg</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>fwcHunQtkbR1y124xcit6ZXdfQBFHPYh80kkbO6WcqnkBXfSEgb9fQ3TeW0937O7</span></span>
<span class="line"><span>TOixRYXBimh4WerZG08zZMt22YcA/+32D2Bfh23iAMmV4p0sAEzJRt8=</span></span>
<span class="line"><span>-----END RSA PRIVATE KEY-----</span></span></code></pre></div><ul><li>When adding the <code>DOCKER_PASSWORD</code> secret, make sure to use your DockerHub Personal Access Token (PAT) and not your DockerHub password.</li><li>Do not share your GitHub Secrets with anyone or store them in your codebase.</li><li>Do not commit your GitHub Secrets to your version control system.</li><li>Do not hardcode your GitHub Secrets in your scripts.</li><li>Make sure your EC2_IP_ADDRESS is the public IP address of your EC2 instance.</li><li>Make sure your EC2_USERNAME is the username you use to SSH into your EC2 instance. This is usually <code>ubuntu</code> for Ubuntu instances.</li><li>Make sure your REPO_NAME matches the name of your dockerhub image in the <code>docker-compose.yml</code>.</li></ul></details><h2 id="step-3-trigger-deployment" tabindex="-1">Step 3: Trigger Deployment <a class="header-anchor" href="#step-3-trigger-deployment" aria-label="Permalink to &quot;Step 3: Trigger Deployment&quot;">​</a></h2><p>To trigger the deployment of your application, push a commit to the <code>main</code> branch with a commit message containing the word <code>deploy</code>. This will trigger the <code>Docker Build</code> workflow, which will build and push the Docker image to DockerHub. Once the build is successful, the <code>Deploy to EC2</code> workflow will be triggered automatically.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;deploy: build and push docker image&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><details class="details custom-block"><summary>🚨 Common Deployment Issues</summary><h3 id="problems-with-build-yml" tabindex="-1">Problems with build.yml <a class="header-anchor" href="#problems-with-build-yml" aria-label="Permalink to &quot;Problems with build.yml&quot;">​</a></h3><ul><li>When pushing to the <code>main</code> branch, make sure your commit message contains the word <code>deploy</code>.</li><li>Make sure your DockerHub credentials and EC2 SSH key are correctly configured in GitHub Secrets.</li><li>Make sure your Docker image is successfully built and pushed to DockerHub.</li><li>If the deployment fails, check the logs of the GitHub Actions workflows for any errors. <ul><li>client build errors <ul><li>Make sure your client application is correctly configured and builds successfully.</li><li>Make sure your client application is in the <code>client</code> directory.</li><li>Make sure your client application has the necessary dependencies installed. Check for optional dependencies that may be missing.</li><li>Make sure your client application has the correct build script in the <code>package.json</code>.</li><li>Make sure build outputs are going to the correct directory. Check <code>dist</code> directory.</li></ul></li></ul></li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-2j744" id="tab-oFPA0nd" checked><label for="tab-oFPA0nd">client/package.json</label><input type="radio" name="group-2j744" id="tab-7ONic1d"><label for="tab-7ONic1d">client/vite.config.js</label></div><div class="blocks"><div class="language-json vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outDir: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="problems-with-deploy-yml" tabindex="-1">Problems with deploy.yml <a class="header-anchor" href="#problems-with-deploy-yml" aria-label="Permalink to &quot;Problems with deploy.yml&quot;">​</a></h3><ul><li>Make sure your <code>docker-compose.yml</code> file is correctly configured and contains the correct image name.</li><li>Make sure your EC2 instance is running and accessible via SSH.</li><li>Make sure your EC2 instance has the necessary permissions to pull the Docker image from DockerHub.</li><li>Make sure your environment file is correctly configured and referenced in the <code>docker-compose.yml</code>.</li><li>Make sure the ec2 instance has available storage space for the docker images.</li></ul></div></div></details>`,38),k=[o];function r(c,d,E,u,g,y){return a(),i("div",null,k)}const b=s(h,[["render",r]]);export{m as __pageData,b as default};
